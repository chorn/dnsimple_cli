#!/bin/bash

# License: See LICENSE

set -e

declare _api="https://api.dnsimple.com/v2"
declare _config=$(mktemp -t dnsimple)
declare _json_data=$(mktemp -t dnsimple_json)
declare _debug=$(mktemp -t dnsimple_debug)
declare _api_out=$(mktemp -t dnsimple_curl)
declare _jq_args

#-----------------------------------------------------------------------------
cleanup() {
  local _exit_code="$1"
  [[ -n "$_exit_code" ]] || _exit_code=0

  for f in "$_config" "$_json_data" "$_api_out" "$_debug" ; do
    if [[ -f "$f" ]] ; then
      [[ "$_exit_code" -ne 0 ]] && cat "$f"
      rm "$f"
    fi
  done

  exit "$_exit_code"
}

#-----------------------------------------------------------------------------
usage() {
  cat <<USAGE
Usage: ${0##*/} <command> [options] [command specific options]
  OPTIONS:
  -h, --help            This.

  --dat,                Specify a \$DNSIMPLE_ACCOUNT_TOKEN, in lieu of or to
  --account-token       override the setting from your environment.
                        You can create 'User access token' on your dnsimple.com
                        User Settings page.

  --dai,                Specify a \$DNSIMPLE_ACCOUNT_ID to override the
  --account-id          wildcard of '_' or to override the setting from your
                        environment. Specifying "auto" will use the API to
                        figure out what the account id really is. Some
                        commands do not support the wildcard.

  --api                 Override the default v2 API URL. The default is:
                        $_api

  COMMANDS:
    whoami              Prints info for your \$DNSIMPLE_ACCOUNT_TOKEN.

    zones               Prints available zones, requires a real
                        \$DNSIMPLE_ACCOUNT_ID.

    zone_info           Prints info for a specific zone.
      -z, --zone <zone name>

    zone_records        Prints records for a specific zone.
      -z, --zone <zone name>

    zone_record         Prints info for a specific zone record.
      -z, --zone <zone name>
      -r, --record <record name>

    zone_record_id      Prints the id for a specific zone record.
      -z, --zone <zone name>
      -r, --record <record name>

    update_a_record     Creates/Updates the zone record with an IP address.
                        Specifying an IP address of "auto" will detect and use
                        the current public internet IP.

      -z, --zone <zone name>
      -r, --record <record name>
      -i, --ip <IP or "auto">

  You need to have 'dig', 'curl', and 'jq' installed and in your \$PATH.
  https://curl.haxx.se/
  https://stedolan.github.io/jq/

USAGE
  cleanup 1
}

#-----------------------------------------------------------------------------
# API
typeset -t dnsimple_api
dnsimple_api() {
  local _resource="$1"
  local _method="$2"

  local -a _args=(
                  [1]="silent"
                  [2]="header = \"Authorization: Bearer ${DNSIMPLE_ACCOUNT_TOKEN}\""
                  [3]="header = \"Accept: application/json\""
                  )

  [[ -n "$_method" ]]    && _args+=([10]="header = \"Content-Type: application/json\"" [11]="request = \"${_method}\"")
  [[ -s "$_json_data" ]] && _args+=([20]="data = \"@${_json_data}\"")

  _args+=([30]="url = \"${_api}/${_resource}?per_page=100\"")

  $(IFS=$'\n' ; echo "${_args[*]}" > "$_config")

  curl --config "$_config" --output "$_api_out" >& "$_debug"
}

#-----------------------------------------------------------------------------
_whoami() {
  dnsimple_api "whoami" && jq '.' < "$_api_out"
}

#-----------------------------------------------------------------------------
_zones() {
  local _dai="$1"
  [[ -n "$_dai" ]] || usage

  dnsimple_api "${_dai}/domains" && jq '.' < "$_api_out"
}

#-----------------------------------------------------------------------------
_zone_info() {
  local _dai="$1"
  local _zone="$2"
  [[ -n "$_dai" && -n "$_zone" ]] || usage

  dnsimple_api "${_dai}/zones/${_zone}" && jq '.' < "$_api_out"
}

#-----------------------------------------------------------------------------
_zone_records() {
  local _dai="$1"
  local _zone="$2"
  [[ -n "$_dai" && -n "$_zone" ]] || usage

  dnsimple_api "${_dai}/zones/${_zone}/records" && jq '.' < "$_api_out"
}

#-----------------------------------------------------------------------------
_zone_record() {
  local _dai="$1"
  local _zone="$2"
  local _record="$3"
  [[ -n "$_dai" && -n "$_zone" && -n "$_record" ]] || usage

  dnsimple_api "${_dai}/zones/${_zone}/records" && jq ".data[] | select(.name == \"${_record}\")" < "$_api_out"
}

#-----------------------------------------------------------------------------
_zone_record_id() {
  local _dai="$1"
  local _zone="$2"
  local _record="$3"
  [[ -n "$_dai" && -n "$_zone" && -n "$_record" ]] || usage

  _zone_record "$_dai" "$_zone" "$_record" | jq -cMj ".id" ; echo
}

#-----------------------------------------------------------------------------
_update_a_record() {
  local _dai="$1"
  local _zone="$2"
  local _record="$3"
  local _ip="$4"
  [[ -n "$_dai" && -n "$_zone" && -n "$_record" && -n "$_ip" ]] || usage

  local _id=$(_zone_record_id "$_dai" "$_zone" "$_record")
  local _method="POST"

  [[ -n "$_id" ]] && _method="PATCH"

  echo "{\"name\":\"${_record}\",\"type\":\"A\",\"content\":\"${_ip}\"}" > "$_json_data"

  dnsimple_api "${_dai}/zones/${_zone}/records/${_id}" "${_method}" && jq '.' < "$_api_out"
}

#-----------------------------------------------------------------------------
# Main program

for _signal in 0 1 ; do
  trap "cleanup $_signal" $_signal
done

[[ $# -eq 0 ]] && usage

for _cli in curl jq dig ; do
  command -v "$_cli" >/dev/null 2>/dev/null || usage
done

declare _command
_command="$1" ; shift
declare _zone
declare _record
declare _ip

while [[ $# -gt 1 ]] ; do
  curr_arg="$1" ; shift
  if [[ $# -gt 0 ]] ; then next_arg="$1" ; shift ; else next_arg="" ; fi
  case "$curr_arg" in
    -h|--help|help) usage ;;
    --api) _api=$next_arg ;;
    --dat|--account-token) DNSIMPLE_ACCOUNT_TOKEN=$next_arg ;;
    --dai|--account-id) DNSIMPLE_ACCOUNT_ID=$next_arg ;;
    -z|--zone) _zone=$next_arg ;;
    -r|--record) _record=$next_arg ;;
    -i|--ip) _ip=$next_arg ;;
  esac
done

[[ -n "$DNSIMPLE_ACCOUNT_TOKEN" ]] || usage

if [[ -n "$_ip" && "$_ip" == "auto" ]] ; then
  _ip=$(dig +short myip.opendns.com @resolver1.opendns.com || curl -f4L http://ifconfig.me/ || curl -f4L http://icanhazip.com/)
fi

if [[ -z "$DNSIMPLE_ACCOUNT_ID" ]] ; then
  DNSIMPLE_ACCOUNT_ID="_"
elif [[ -n "$DNSIMPLE_ACCOUNT_ID" && "$DNSIMPLE_ACCOUNT_ID" == "auto" ]] ; then
  DNSIMPLE_ACCOUNT_ID=$(dnsimple_api "whoami" && jq '.data.account.id' < "$_api_out")
fi

case "$_command" in
  whoami)
    _whoami
    ;;

  zones)
    _zones "$DNSIMPLE_ACCOUNT_ID"
    ;;

  zone_info)
    _zone_info "$DNSIMPLE_ACCOUNT_ID" "$_zone"
    ;;

  zone_records)
    _zone_records "$DNSIMPLE_ACCOUNT_ID" "$_zone"
    ;;

  zone_record)
    _zone_record "$DNSIMPLE_ACCOUNT_ID" "$_zone" "$_record"
    ;;

  zone_record_id)
    _zone_record_id "$DNSIMPLE_ACCOUNT_ID" "$_zone" "$_record"
    ;;

  update_a_record)
    _update_a_record "$DNSIMPLE_ACCOUNT_ID" "$_zone" "$_record" "$_ip"
    ;;

  *) usage ;;
esac

